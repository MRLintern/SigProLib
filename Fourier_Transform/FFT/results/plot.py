# python script for plotting the results generated by the FFT application

import numpy as np
import matplotlib.pyplot as plt

# Sampling frequency (Hz) - set to your actual value
fs = 48000  

# Load data from the .dat files
input_signal = np.loadtxt("input_signal.dat")
output_ifft  = np.loadtxt("output_ifft.dat")
output_imx   = np.loadtxt("output_imx.dat")
output_mag   = np.loadtxt("output_mag.dat")   # magnitude spectrum (half)
output_rex   = np.loadtxt("output_rex.dat")

# Number of samples
N = len(input_signal)

# Time axis in seconds
t = np.arange(N) / fs

# Frequency axis in Hz (only first half is meaningful for FFT magnitude)
freqs = np.fft.fftfreq(N, d=1/fs)[:N//2]

# --- Plotting ---

plt.figure(figsize=(14,10))

# 1. Input signal (time domain)
plt.subplot(3,2,1)
plt.plot(t, input_signal, label="Input Signal")
plt.xlabel("Time [s]")
plt.ylabel("Amplitude")
plt.title("Input Signal (Time Domain)")
plt.grid(True)
plt.legend()

# 2. FFT real part (vs bin index)
plt.subplot(3,2,2)
plt.plot(np.arange(N), output_rex, label="Real Part")
plt.xlabel("Frequency [Hz] Bin")
plt.ylabel("Amplitude")
plt.title("FFT Real Part")
plt.grid(True)
plt.legend()

# 3. FFT imaginary part (vs bin index)
plt.subplot(3,2,3)
plt.plot(np.arange(N), output_imx, label="Imaginary Part", color="orange")
plt.xlabel("Frequency [Hz] Bin")
plt.ylabel("Amplitude")
plt.title("FFT Imaginary Part")
plt.grid(True)
plt.legend()

# 4. Magnitude spectrum (frequency in Hz)
plt.subplot(3,2,4)
plt.plot(freqs, output_mag, label="|FFT|", color="green")
plt.xlabel("Frequency [Hz]")
plt.ylabel("Magnitude")
plt.title("Magnitude Spectrum")
plt.grid(True)
plt.legend()

# 5. IFFT reconstructed signal (time domain)
plt.subplot(3,2,5)
plt.plot(t, output_ifft, label="Reconstructed (IFFT)", color="red")
plt.xlabel("Time [s]")
plt.ylabel("Amplitude")
plt.title("Reconstructed Signal (IFFT)")
plt.grid(True)
plt.legend()

# 6. Input vs Reconstructed (overlay in time domain)
plt.subplot(3,2,6)
plt.plot(t, input_signal, label="Input", alpha=0.7)
plt.plot(t, output_ifft, label="IFFT", alpha=0.7)
plt.xlabel("Time [s]")
plt.ylabel("Amplitude")
plt.title("Comparison: Input vs Reconstructed")
plt.grid(True)
plt.legend()

plt.tight_layout()

# Save the figure
plt.savefig("fft_results.png", dpi=300)

# Show the plots
plt.show()