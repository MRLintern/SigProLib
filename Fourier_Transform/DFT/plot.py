# python script for plotting the results generated by the FFT application

import numpy as np
import matplotlib.pyplot as plt

# --- Parameters ---

fs = 48000   # sampling frequency in Hz
N = 320      # number of samples

# --- Load data ---

input_signal = np.loadtxt("input_signal.dat")
output_idft  = np.loadtxt("output_idft.dat")
output_rex   = np.loadtxt("output_rex.dat")
output_imx   = np.loadtxt("output_imx.dat")
output_mag   = np.loadtxt("output_mag.dat")

# --- Axes ---
t = np.arange(N) / fs                       # time axis in seconds
freqs = np.fft.fftfreq(N, d=1/fs)[:N//2]    # frequency axis (Hz, first half)

# --- Plotting ---
plt.figure(figsize=(14,10))

# 1. Input signal (time-domain)
plt.subplot(3,2,1)
plt.plot(t, input_signal, label="Input Signal")
plt.xlabel("Time [s]")
plt.ylabel("Amplitude")
plt.title("Input Signal")
plt.grid(True)
plt.legend()

# 2. Reconstructed signal (IDFT)
plt.subplot(3,2,2)
plt.plot(t[:len(output_idft)], output_idft, label="IDFT Reconstructed", color="red")
plt.xlabel("Time [s]")
plt.ylabel("Amplitude")
plt.title("Reconstructed Signal (IDFT)")
plt.grid(True)
plt.legend()

# 3. Input vs IDFT overlay
plt.subplot(3,2,3)
plt.plot(t, input_signal, label="Input", alpha=0.7)
plt.plot(t[:len(output_idft)], output_idft, label="IDFT", alpha=0.7)
plt.xlabel("Time [s]")
plt.ylabel("Amplitude")
plt.title("Input vs Reconstructed")
plt.grid(True)
plt.legend()

# 4. Real part of DFT
plt.subplot(3,2,4)
plt.plot(np.arange(N), output_rex, label="Real Part")
plt.xlabel("Bin Index")
plt.ylabel("Amplitude")
plt.title("DFT Real Part")
plt.grid(True)
plt.legend()

# 5. Imag part of DFT
plt.subplot(3,2,5)
plt.plot(np.arange(N), output_imx, label="Imag Part", color="orange")
plt.xlabel("Bin Index")
plt.ylabel("Amplitude")
plt.title("DFT Imaginary Part")
plt.grid(True)
plt.legend()

# 6. Magnitude of frequency spectrum
plt.subplot(3,2,6)
plt.plot(freqs, output_mag, label="|X[k]|", color="green")
plt.xlabel("Frequency [Hz]")
plt.ylabel("Magnitude")
plt.title("Magnitude Spectrum")
plt.grid(True)
plt.legend()

plt.tight_layout()

# Save figure
plt.savefig("dft_results.png", dpi=300)

# Show plots
plt.show()
